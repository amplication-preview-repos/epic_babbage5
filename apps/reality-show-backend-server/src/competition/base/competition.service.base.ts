/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Competition as PrismaCompetition } from "@prisma/client";

export class CompetitionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CompetitionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.competition.count(args);
  }

  async competitions<T extends Prisma.CompetitionFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompetitionFindManyArgs>
  ): Promise<PrismaCompetition[]> {
    return this.prisma.competition.findMany<Prisma.CompetitionFindManyArgs>(
      args
    );
  }
  async competition<T extends Prisma.CompetitionFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompetitionFindUniqueArgs>
  ): Promise<PrismaCompetition | null> {
    return this.prisma.competition.findUnique(args);
  }
  async createCompetition<T extends Prisma.CompetitionCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompetitionCreateArgs>
  ): Promise<PrismaCompetition> {
    return this.prisma.competition.create<T>(args);
  }
  async updateCompetition<T extends Prisma.CompetitionUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompetitionUpdateArgs>
  ): Promise<PrismaCompetition> {
    return this.prisma.competition.update<T>(args);
  }
  async deleteCompetition<T extends Prisma.CompetitionDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CompetitionDeleteArgs>
  ): Promise<PrismaCompetition> {
    return this.prisma.competition.delete(args);
  }
}
